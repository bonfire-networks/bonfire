defmodule Bonfire.Web.ExploreLive do
  @moduledoc """
  The instance explore page, mainly for guests visiting the local feed
  """
  use Bonfire.UI.Common.Web, :surface_live_view

  alias Bonfire.Me.Accounts
  alias Bonfire.UI.Social.FeedLive

  # @changelog File.read!("#{Config.get(:project_path, "../..")}/docs/CHANGELOG.md")

  on_mount {LivePlugs, [Bonfire.UI.Me.LivePlugs.LoadCurrentUser]}

  def mount(%{"dashboard" => _} = params, session, socket) do
    mounted(params, session, socket)
  end

  def mount(params, session, socket) do
    case Config.get([:ui, :homepage_redirect_to]) do
      url when is_binary(url) ->
        {:ok,
         socket
         |> redirect_to(url, fallback: "/dashboard", replace: false)}

      _ ->
        mounted(params, session, socket)
    end
  end

  defp mounted(params, _session, socket) do
    is_guest? = is_nil(current_user_id(assigns(socket)))

    {:ok,
     socket
     |> assign(
       page: "explore",
       is_guest?: is_guest?,
       without_sidebar: is_guest?,
       without_secondary_widgets: is_guest?,
       no_header: true,
       selected_tab: "explore",
       error: nil,
       loading: true,
       feed: nil,
       feed_id: nil,
       feed_ids: nil,
       feed_component_id: nil,
       page_info: nil,
       show_about_instance?: nil,
       nav_items: Bonfire.Common.ExtensionModule.default_nav(),
       #  without_sidebar: true,
       sidebar_widgets: [
         guests: [
           secondary: [
             {Bonfire.Tag.Web.WidgetTagsLive, []},
             {Bonfire.UI.Me.WidgetAdminsLive, []}
           ]
         ],
         users: [
           secondary: [
             #  {Bonfire.UI.Social.WidgetFeedLive, []},
             {Bonfire.Tag.Web.WidgetTagsLive, []}
           ]
         ]
       ]
     )}
  end

  def handle_params(params, _url, socket) do
    # debug(params, "param")

    app = String.capitalize(Bonfire.Application.name())

    # instance_name =
    #   Config.get([:ui, :theme, :instance_name]) || l("An instance of %{app}", app: app)

    context = assigns(socket)[:__context__]

    feed_name =
      if module_enabled?(Bonfire.Social.Pins, context) and
           Settings.get(
             [Bonfire.UI.Social.FeedsLive, :curated],
             false,
             context
           ) do
        :curated
      else
        e(assigns(socket), :live_action, nil) ||
          Settings.get(
            [Bonfire.UI.Social.FeedLive, :default_feed],
            :default,
            context
          )
      end

    {:noreply,
     socket
     |> assign(
       Bonfire.Social.Feeds.LiveHandler.feed_default_assigns(
         {
           feed_name,
           params
         },
         socket
       )
     )
     |> assign(..., FeedLive.maybe_widgets(e(..., :assigns, nil), feed_name))}
  end

  # render_sface_or_native()
end
